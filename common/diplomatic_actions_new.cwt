
types = {
	# Reserved keyword by Paradox
	## type_key_filter <> static_actions
	type[new_diplomatic_action] = {
		path = "game/common/new_diplomatic_actions"

		subtype[require_acceptance] = {
			require_acceptance = yes
		}

		localisation = {
			## required
			title = "$_title"
			## required
			desc = "$_desc"
			## required
			tooltip = "$_tooltip"

			subtype[require_acceptance] = {
				## required
				dialog = "$_dialog"
			}
		}
	}
}

new_diplomatic_action = {
	## cardinality = 0..inf
	category = scalar

	###Can the other side decline?
	require_acceptance = bool

	## cardinality = 0..1
	alert_index = int
	## cardinality = 0..1
	alert_tooltip = localisation


	## replace_scope = { this = country root = country from = country }
	is_visible = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## replace_scope = { this = country root = country from = country }
	is_allowed = {
		alias_name[trigger] = alias_match_left[trigger]
	}
	## replace_scope = { this = country root = country from = country }
	on_accept = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	## replace_scope = { this = country root = country from = country }
	on_decline = {
		alias_name[effect] = alias_match_left[effect]
	}
	## cardinality = 0..1
	## replace_scope = { this = country root = country from = country }
	on_accept = {
		alias_name[effect] = alias_match_left[effect]
	}


	## cardinality = 0..1
	###This works similarly to variable_arithmetic_trigger, but does not support triggers generally. Instead, "limit" will be evaluated first and the rest ignored if it isn't passed.
	ai_acceptance = {
		## cardinality = 1..inf
		## replace_scope = { this = country root = country from = country }
		add_entry = {
			name = localisation
			## cardinality = 0..1
			limit = {
				alias_name[trigger] = alias_match_left[trigger]
			}


			## cardinality = 0..inf
			export_to_variable = {
				enum[which_varname] = ai_value
				value = enum[export_to_variable_data]
				## cardinality = 0..1
				who = scope[country]
				## cardinality = 0..1
				with = scope[country]
			}

			## cardinality = 0..inf
			multiply_variable = {
				which = ai_value
				value = float
			}

			## cardinality = 0..inf
			subtract_variable = {
				which = ai_value
				value = float
			}

			## cardinality = 0..inf
			divide_variable = {
				which = ai_value
				value = float
			}

			## cardinality = 0..inf
			set_variable = {
				## cardinality = 0..1
				which = ai_value
				## cardinality = 0..1
				value = float
				## cardinality = 0..1
				ai_value = float
			}

			## cardinality = 0..inf
			change_variable = {
				which = ai_value
				value = float
			}

			## cardinality = 0..inf
			check_variable = {
				cardinality = 2..2
				which = ai_value
				cardinality = 2..2
				which = value[variable]
			}

			## cardinality = 0..inf
			is_variable_equal = {
				cardinality = 2..2
				which = ai_value
				cardinality = 2..2
				which = value[variable]
			}
		}
	}

	## replace_scope = { this = country root = country from = country }
	ai_will_do = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

