
types = {
	type[government] = {
		path = "game/common/governments"

		subtype[normal] = {
			basic_reform = scalar
		}

		## type_key_filter = pre_dharma_mapping
		subtype[pre_dharma_mapping] = {
		}

		localisation = {
			subtype[normal] = {
				## required
				name = "$_name"
			}
		}
	}
	type[government_reform] = {
		path = "game/common/government_reforms"
		## type_key_filter = defaults_reform
		subtype[default] = {
		}
		subtype[legacy] = {
			legacy_government = yes
		}
		subtype[basic] = {
			basic_reform = yes
		}
#		## type_key_filter <> defaults_reform
		subtype[new] = {
			## cardinality = 0..1
			legacy_government = no
		}
		localisation = {
			## required
			name = "$"
			description = "$_desc"
		}
	}
	type[states_general_faction] = {
		path = "game/common/government_reforms"
		skip_root_key = { any conditional states_general_mechanic }

		localisation = {
			## required
			name = "$"
		}
	}
	#necessary for localisations
	## type_key_filter <> { defaults_reform republic_mechanic monarchy_mechanic theocracy_mechanic tribe_mechanic }
	type[new_government_reform] = {
		path = "game/common/government_reforms"
		subtype[new] = {
			## cardinality = 0..1
			legacy_government = no
		}
		localisation = {
			subtype[new] = {
				## required
				description = "$_desc"
			}
		}
	}
	type[government_ranks] = {
		path = "game/common/government_ranks"
		path_file = "00_government_ranks.txt"
		name_from_file = yes
		type_per_file = yes
	}
	type[government_name] = {
		path = "game/common/government_names"
		subtype[default] = {
			government_reform = scalar
		}
	}
	type[government_mechanic] = {
		path = "game/common/government_mechanics"
		localisation = {
			## required
			name = "ability_$"
		}
	}
	type[government_mechanic_power] = {
		path = "game/common/government_mechanics"
		# Only look for things inside <mechanic> = { powers = { HERE } }
		skip_root_key = { any powers }
		subtype[base_monthly_growth] = {
			base_monthly_growth = float[-inf..-0.1]
			base_monthly_growth = float[0.1..inf]
		}
		subtype[development_scaled_monthly_growth] = {
			development_scaled_monthly_growth = float[-inf..-0.1]
			development_scaled_monthly_growth = float[0.1..inf]
		}
		localisation = {
			## required
			name = "$"
			## required
			gain_modifier = "$_gain_modifier"
			subtype[base_monthly_growth] = {
				## required
				modifier = "monthly_$"
			}
			subtype[development_scaled_monthly_growth] = {
				## required
				modifier = "monthly_$"
			}
		}
	}
	type[government_mechanic_interaction] = {
		path = "game/common/government_mechanics"
		# Only look for things inside <mechanic> = { interactions = { HERE } }
		skip_root_key = { any interactions }
		localisation = {
			## required
			name = "$"
			## required
			desc = "$_desc"
		}
	}
}

government_mechanic = {
	## cardinality = 0..1
	###GFX icon strip the alert icon to use for this mechanic is in
	alert_icon_gfx = scalar # TODO: make it a gfx value
	## cardinality = 0..1
	###the index of the icon for this mechanic in the strip of alert_icon_gfx
	alert_icon_index = int[1..inf]
	## replace_scope = { root = country this = country }
	###criteria for the mechanic to be available, regardless of what is here one must have a government reform with the mechanic in its government_mechanic = { } block.
	## cardinality = 0..1
	available = {
		alias_name[trigger] = alias_match_left[trigger]
	}

	## cardinality = 0..1
	powers = {
		## cardinality = 0..inf
		<government_mechanic_power> = {
			## cardinality = 0..1
			###link to the gui that will be used to display this power. By default, it will be government_shared_power if it's not a power only associated with one action, or if it is a unique power for one interaction, this will be ignored and the bar from the interaction's gui will be used. New versions of this will need to contain the same elements so they can be filled in.
			gui = scalar
			###Maximum value the bar can go
			max = int[1..inf]
			## cardinality = 0..1
			###Minimum value the bar can go
			min = int
			## cardinality = 0..1
			###default power when resetting
			default = int
			## cardinality = 0..1
			###Category of monarch power used for this mechanic
			monarch_power = enum[power_categories]
			## cardinality = 0..1
			###How much it grows by each month
			base_monthly_growth = float
			## cardinality = 0..1
			###Resets back to value defined in default (or 0 if not defined) when your ruler dies
			reset_on_new_ruler = bool
			## cardinality = 0..1
			development_scaled_monthly_growth = float
			## cardinality = 0..1
			development_scaled_capped_monthly_growth = float
			## cardinality = 0..1
			development_scale_cap = int
			## cardinality = 0..inf
			scaled_modifier = {
				## cardinality = 0..1
				trigger = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				modifier = {
					alias_name[modifier] = alias_match_left[modifier]
				}
				## cardinality = 0..1
				###Default is 0, Determines from which value modifier should start applying. I.e. if set to 5, it will scale to 0% for anything below 5. If set to a value higher than end_value it will work like a reverse_scaled_modifier
				start_value = int
				## cardinality = 0..1
				###Optional, default is 100. Determines to which value modifier should still be applying/scaling. I.e. if set to 90, it will scale to 100% for anything above 90. If set to a value lower than start_value it will work like a reverse_scaled_modifier
				end_value = int
			}
			## cardinality = 0..inf
			reverse_scaled_modifier = {
				## cardinality = 0..1
				trigger = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				modifier = {
					alias_name[modifier] = alias_match_left[modifier]
				}
				## cardinality = 0..1
				###Default is 0
				start_value = int
				## cardinality = 0..1
				###Default is 100
				end_value = int
				## cardinality = 0..1
				###Default is 'yes'
				extend_beyond_value = bool
			}
			## cardinality = 0..inf
			###Optional country modifier that does not scale, but is applied fully when in range
			range_modifier = {
				## cardinality = 0..1
				trigger = {
					alias_name[trigger] = alias_match_left[trigger]
				}
				modifier = {
					alias_name[modifier] = alias_match_left[modifier]
				}
				## cardinality = 0..1
				###Default is 0, must be lower or equal to end_value
				start_value = int
				## cardinality = 0..1
				###Default is 100, must be bigger or equal to start_value
				end_value = int
			}
			## cardinality = 0..1
			is_good = bool
			## cardinality = 0..1
			on_max_reached = {
				alias_name[effect] = alias_match_left[effect]
			}
			## cardinality = 0..1
			on_min_reached = {
				alias_name[effect] = alias_match_left[effect]
			}
			## cardinality = 0..1
			show_before_interactions = yes
		}
	}

	## cardinality = 0..1
	interactions = {
		## cardinality = 0..inf
		<government_mechanic_interaction> = {
			## cardinality = 0..1
			icon = scalar # TODO: make it a GFX
			## cardinality = 0..1
			gui = scalar # TODO: make it a GUI
			## cardinality = 0..1
			###Must be one of the costs defined in its powers
			cost_type = <government_mechanic_power>
			## cardinality = 0..1
			cost = int
			## cardinality = 0..1
			## replace_scope = { root = country this = country }
			trigger = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## replace_scope = { root = country this = country }
			effect = {
				alias_name[effect] = alias_match_left[effect]
			}
			## cardinality = 0..1
			center = bool
			## cardinality = 0..1
			cooldown_years = int
			## cardinality = 0..1
			###Token to use on cooldown, can be re-used across actions to make them all be put on cooldown when any is used
			cooldown_token = value_set[cooldown_token]
			## cardinality = 0..1
			cooldown_token = value[cooldown_token]
			## cardinality = 0..1
			###defines the string to use for the name of the cooldown. If not specified, it will use the name of the interaction.
			cooldown_desc = localisation
			## cardinality = 0..1
			## replace_scope = { root = country this = country }
			ai_chance = {
				factor = float[0..10000]
				alias_name[modifier_rule] = alias_match_left[modifier_rule]
			}
		}
	}
}

government_reform = {
	subtype[default] = {
		valid_for_new_country = bool
		allow_convert = bool
		rulers_can_be_generals = bool
		heirs_can_be_generals = bool
		fixed_rank = int
		republican_name = bool
		government_abilities = { }
		claim_states = bool
		religion = bool
		republic = bool
		dictatorship = bool
		is_elective = bool
		queen = bool
		heir = bool
		has_parliament = bool
		has_devotion = bool
		has_meritocracy = bool
		allow_force_tributary = bool
		duration = int
		election_on_death = bool
		monarchy = bool
		tribal = bool
		different_religion_acceptance = int
		different_religion_group_acceptance = int
		boost_income = bool
		monastic = bool
		can_use_trade_post = bool
		native_mechanic = bool
		can_form_trade_league = bool
		free_city = bool
		is_trading_city = bool
		trade_city_reform = ""
		maintain_dynasty = bool
		allow_migration = bool
		nation_designer_trigger = { }
		nation_designer_cost = int
		papacy = bool
		has_harem = bool
		has_pashas = bool
		has_janissaries = bool
		allow_vassal_war = bool
		allow_vassal_alliance = bool
		min_autonomy = int
		factions = { }
		foreign_slave_rulers = bool
		royal_marriage = bool
		nomad = bool
		assimilation_cultures = { }
		states_general_mechanic = { }
		valid_for_nation_designer = bool
		allow_normal_conversion = bool
		start_territory_to_estates = float
		has_term_election = bool
		factions_frame = 2
		factions_frame = 9
		force_admiral_leader = bool
		force_general_leader = bool
		admirals_become_rulers = bool
		generals_become_rulers = bool
		allow_banners = bool
		uses_revolutionary_zeal = bool
		revolutionary = bool
		revolutionary_client_state = bool
		disallowed_trade_goods = {
			## cardinality = 0..inf
			<trade_good>
		}
		free_concentrate_development = bool
		raze_province = bool
		force_conversion_gives_global_holy_war_released_modifier = bool
		allow_draft_transport_ships = bool
		can_customise_heir = bool
		allow_cawa = bool
		can_change_primary_culture = bool
		allow_carolean = bool
		can_inherit_personal_unions = bool
		block_cultural_union = bool
		has_cultural_union = bool
		can_remove_idea_group = bool
		mercs_do_not_cost_army_professionalism = bool
	}


	subtype[legacy] = {
		legacy_government = yes
	}

	subtype[basic] = {
		basic_reform = yes
	}

	subtype[new] = {
		legacy_equivalent = <government_reform.legacy>
		legacy_equivalent = enum[hardcoded_legacygovernments]

		## cardinality = 0..1
		assimilation_cultures = {
			## cardinality = 1..inf
			## replace_scope = { root = country this = country }
			<culture_group> = {
				alias_name[modifier] = alias_match_left[modifier]
			}
		}
	}

	subtype[!default] = {
		## severity = info
		icon = scalar #todo: refers to a file name in a certain folder

		## cardinality = 0..1
		queen = bool
		## cardinality = 0..1
		heir = bool
		## cardinality = 0..1
		religion = bool
		## cardinality = 0..1
		papacy = bool
		## cardinality = 0..1
		nomad = bool
		## cardinality = 0..1
		start_territory_to_estates = float
		## cardinality = 0..1
		allow_normal_conversion = bool
		## cardinality = 0..1
		valid_for_new_country = bool
		## cardinality = 0..1
		valid_for_nation_designer = bool
		## cardinality = 0..1
		nation_designer_cost = int
		## cardinality = 0..1
		monarchy = bool

		## cardinality = 0..1
		has_devotion = bool
		## cardinality = 0..1
		allow_force_tributary = bool
		## cardinality = 0..1
		different_religion_acceptance = int
		## cardinality = 0..1
		different_religion_group_acceptance = int
		## cardinality = 0..1
		uses_revolutionary_zeal = bool

		## cardinality = 0..1
		election_on_death = bool
		## cardinality = 0..1
		tribal = bool
		## cardinality = 0..1
		monastic = bool
		## cardinality = 0..1
		native_mechanic = bool

		## cardinality = 0..1
		dictatorship = bool
		## cardinality = 0..1
		is_elective = bool
		## cardinality = 0..1
		is_trading_city = bool

		## cardinality = 0..1
		free_city = bool
		## cardinality = 0..1
		allow_migration = bool

		## cardinality = 0..1
		lock_level_when_selected = bool

		## cardinality = 0..1
		rulers_can_be_generals = bool
		## cardinality = 0..1
		heirs_can_be_generals = bool

		## cardinality = 0..1
		allow_convert = bool

		## cardinality = 0..1
		maintain_dynasty = bool

		## cardinality = 0..1
		allow_vassal_war = bool
		## cardinality = 0..1
		allow_vassal_alliance = bool

		## cardinality = 0..1
		revolutionary = bool
		## cardinality = 0..1
		revolutionary_client_state = bool

		## cardinality = 0..1
		free_concentrate_development = bool
		## cardinality = 0..1
		raze_province = bool
		## cardinality = 0..1
		force_conversion_gives_global_holy_war_released_modifier = bool
		## cardinality = 0..1
		allow_draft_transport_ships = bool
		## cardinality = 0..1
		can_customise_heir = bool
		## cardinality = 0..1
		allow_cawa = bool
		## cardinality = 0..1
		can_change_primary_culture = bool
		## cardinality = 0..1
		has_cultural_union = bool

		## cardinality = 0..1
		replacement_on_independence_war = <government_reform.new>

		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		nation_designer_trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}


		## cardinality = 0..1
		fixed_rank = int

		## replace_scope = { root = country this = country }
		modifiers = {
			alias_name[modifier] = alias_match_left[modifier]
		}
		## replace_scope = { root = country this = country }
		ai = {
			factor = float
			alias_name[modifier_rule] = alias_match_left[modifier_rule]
		}

		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		potential = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		trigger = {
			alias_name[trigger] = alias_match_left[trigger]
		}

		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		effect = {
			alias_name[effect] = alias_match_left[effect]
		}

		## replace_scope = { root = country this = country }
		## cardinality = 0..1
		removed_effect = {
			alias_name[effect] = alias_match_left[effect]
		}

		## cardinality = 0..1
		government_abilities = {
			enum[government_mechanics]
		}

		## cardinality = 0..1
		government_abilities = {
			## cardinality = 1..inf
			<government_mechanic>
		}

		## cardinality = 0..inf
		conditional = {
			allow = {
				alias_name[trigger] = alias_match_left[trigger]
			}
			## cardinality = 0..1
			allow_carolean = bool
			## cardinality = 0..1
			allow_cawa = bool
			## cardinality = 0..1
			allow_draft_transport_ships = bool
			## cardinality = 0..1
			allow_migration = bool
			## cardinality = 0..1
			can_use_trade_post = bool
			## cardinality = 0..1
			can_form_trade_league = bool
			## cardinality = 0..1
			trade_city_reform = <government_reform>
			## cardinality = 0..1
			has_parliament = bool

			## cardinality = 0..1
			has_devotion = bool
			## cardinality = 0..1
			has_meritocracy = bool
			## cardinality = 0..1
			has_harem = bool
			## cardinality = 0..1
			has_pashas = bool
			## cardinality = 0..1
			has_janissaries = bool
			## cardinality = 0..1
			claim_states = bool
			## cardinality = 0..1
			government_abilities = {
				enum[government_mechanics]
			}
			## cardinality = 0..1
			government_abilities = {
				## cardinality = 1..inf
				<government_mechanic>
			}
			## cardinality = 0..1
			foreign_slave_rulers = bool
			## cardinality = 0..1
			states_general_mechanic = {
				## cardinality = 2..2
				## replace_scope = { root = country this = country }
				<states_general_faction> = {
					alias_name[modifier] = alias_match_left[modifier]
				}
			}

			## cardinality = 0..1
			queen = bool
			## cardinality = 0..1
			heir = bool
			## cardinality = 0..1
			duration = int
			## cardinality = 0..1
			has_term_election = bool

			## cardinality = 0..1
			factions = {
				## cardinality = 0..inf
				<faction>
			}

			## cardinality = 0..1
			is_elective = bool

			## cardinality = 0..1
			allow_banners = bool
			## cardinality = 0..1
			election_on_death = bool

			## cardinality = 0..1
			raze_province = bool

			## cardinality = 0..1
			custom_attributes = {
				## cardinality = 0..1
				enables_plutocratic_idea_group = bool
				## cardinality = 0..1
				enables_aristocratic_idea_group = bool
				## cardinality = 0..1
				lottery_election = bool
				## cardinality = 0..1
				election_on_death = bool
				## cardinality = 0..1
				is_merchant_republic = bool
				## cardinality = 0..1
				locked_government_type = bool
				## cardinality = 0..1
				maratha_general_interaction = bool
				## cardinality = 0..1
				better_purbias_interaction = bool
				## cardinality = 0..1
				enables_nepotism = bool
				## cardinality = 0..1
				force_admiral_leader = bool
				## cardinality = 0..1
				force_general_leader = bool
				## cardinality = 0..1
				admirals_become_rulers = bool
				## cardinality = 0..1
				gives_war_against_the_world_tooltip_dummy = yes
				## cardinality = 0..1
				cannot_become_dictatorship = bool
				## cardinality = 0..inf
				value_set[custom_attribute] = bool
				## cardinality = 0..1
				block_cultural_union = bool
				## cardinality = 0..1
				can_remove_idea_group = bool
				## cardinality = 0..1
				mercs_do_not_cost_army_professionalism = bool
			}
		
			## cardinality = 0..1
			nomad = bool
			## cardinality = 0..1
			native_mechanic = bool
			## cardinality = 0..1
			allow_force_tributary = bool
			## cardinality = 0..1
			uses_revolutionary_zeal = bool
			## cardinality = 0..1
			boost_income = bool
			## cardinality = 0..1
			is_trading_city = bool

			## cardinality = 0..1
			modifiers = {
				alias_name[modifier] = alias_match_left[modifier]
			}
		}

		## cardinality = 0..1
		can_form_trade_league = bool

		## cardinality = 0..1
		has_term_election = bool
		## cardinality = 0..1
		duration = int
		## cardinality = 0..1
		republican_name = bool
		## cardinality = 0..1
		royal_marriage = bool
		## cardinality = 0..1
		boost_income = bool

		## cardinality = 0..1
		factions = {
			## cardinality = 1..inf
			<faction>
		}

		## cardinality = 0..1
		republic = bool

		## cardinality = 0..1
		custom_attributes = {
			## cardinality = 0..1
			enables_plutocratic_idea_group = bool
			## cardinality = 0..1
			enables_aristocratic_idea_group = bool
			## cardinality = 0..1
			lottery_election = bool
			## cardinality = 0..1
			election_on_death = bool
			## cardinality = 0..1
			is_merchant_republic = bool
			## cardinality = 0..1
			locked_government_type = bool
			## cardinality = 0..1
			maratha_general_interaction = bool
			## cardinality = 0..1
			better_purbias_interaction = bool
			## cardinality = 0..1
			enables_nepotism = bool
			## cardinality = 0..1
			force_admiral_leader = bool
			## cardinality = 0..1
			force_general_leader = bool
			## cardinality = 0..1
			admirals_become_rulers = bool
			## cardinality = 0..1
			gives_war_against_the_world_tooltip_dummy = yes
			## cardinality = 0..1
			cannot_become_dictatorship = bool
			## cardinality = 0..inf
			value_set[custom_attribute] = bool
			## cardinality = 0..1
			block_cultural_union = bool
			## cardinality = 0..1
			can_remove_idea_group = bool
			## cardinality = 0..1
			mercs_do_not_cost_army_professionalism = bool
		}

		## cardinality = 0..1
		factions_frame = 2
		## cardinality = 0..1
		factions_frame = 9
		## cardinality = 0..1
		generals_become_rulers = bool
		## cardinality = 0..1
		disallowed_trade_goods = {
			## cardinality = 0..inf
			<trade_good>
		}

		## cardinality = 0..1
		post_removed_effect = {
			alias_name[effect] = alias_match_left[effect]
		}
	}
}

enums = {
	enum[government_icons] = {
		ambrosian_republic
		arabic_scripture
		asian_scripture
		assembly_hall
		ballot_box
		british_queen
		castle
		celestial_empire
		chieftain
		chinese_palace
		church
		clergyman
		compass
		constitution
		crown
		crown_highlighted
		daimyo
		dutch_flag
		dutch_republic
		elective_monarchy
		english_monarchy
		feudal_theocracy
		fist_in_air
		free_city
		general_eastern_administrative
		generic_people
		horde_riding
		horde_riding_highlighted
		indian_crown
		indian_palace
		indian_sultanate
		judge
		king
		king_2
		king_2_highlighted
		king_highlighted
		landscape
		mamluk_government
		man_and_children
		man_on_podium
		mandala_system
		map
		map_2
		merchant
		merchant_ship
		misl_confederacy
		monks
		muslim
		muslim_highlighted
		nayankara_system
		noble_indian
		noble_muslim
		nobleman
		ottoman_government
		papacy
		paper_money_map
		paper_with_seal
		paper_with_seal_3
		parliament
		parliament_hall
		parliament_highlighted
		peacock_throne
		peasant_republic
		peasants
		people_walking
		politician
		pope
		pope_highlighted
		prussian_monarchy
		prussian_monarchy_2
		queen
		rajput_kingdom
		religious_leader
		religious_leader_highlighted
		retain_tribal_hierarchy
		revolutionary_republic
		rioting_burning
		rioting_burning_2
		russian_principality
		samurai
		shaman
		shogunate
		siddhi_recruitment
		soldiers
		soldiers_2
		soldiers_3
		soldiers_3_highlighted
		soldiers_4
		soldiers_5
		soldiers_6
		states_general
		strength_of_the_khalsa
		trading_city
		tribal_centralize_power
		tribal_civil_society
		tribal_council
		tribal_lip_service
		tribal_martial_society
		tribal_religious_society
	}
	enum[hardcoded_legacygovernments] = {
		administrative_monarchy
		administrative_republic
		ambrosian_republic_legacy
		american_republic_legacy
		black_market_consortium_government
		bureaucratic_despotism
		celestial_empire_legacy
		colonial_government_legacy
		constitutional_monarchy
		constitutional_republic
		cossacks_legacy_reform
		daimyo_legacy
		despotic_monarchy
		dutch_republic_legacy
		elective_monarchy_legacy
		english_monarchy_legacy
		enlightened_despotism
		federal_republic_legacy
		feudal_monarchy
		feudal_theocracy_legacy
		holy_state_legacy
		holy_state_legacy
		imperial_city
		indep_daimyo_legacy
		iqta_legacy
		mamluk_government_legacy
		merchant_republic
		military_dictatorship
		monastic_order_government
		native_council_legacy
		noble_republic
		oligarchic_republic
		ottoman_government_legacy
		papal_government
		peasants_republic_legacy
		pirate_kingdom
		pirate_republic
		principality_legacy
		protectorate_parliament_legacy
		prussian_monarchy_legacy
		prussian_republic
		republican_dictatorship
		revolutionary_empire
		revolutionary_republic
		shogunate_legacy
		siberian_native_council
		signoria
		steppe_horde_legacy
		theocratic_government
		trading_city_legacy
		tribal_democracy_legacy
		tribal_despotism_legacy
		tribal_federation_legacy
		tribal_kingdom_legacy
		tsardom_legacy
		united_cantons_legacy
		veche_republic_legacy
		venetian_merchant_republic
		war_against_the_world_government
		sacred_kingdom_legacy
		negusa_nagast_legacy
		solomonic_empire_legacy
		matrilineal_system_legacy
		tribal_confederacy_legacy
		mossi_federal_kingdom_legacy
		musa_rule_legacy
		great_man_legacy
		shaka_regime_legacy
		feudal_tribe_legacy
	}
}


government = {
	subtype[normal] = {
		basic_reform = <government_reform.basic>
		color = {
			## cardinality = 3..3
			int[0..255]
		}

		reform_levels = {
			## cardinality = 1..inf
			localisation = {
				reforms = {
					## cardinality = 1..inf
					<government_reform.new>
				}
			}
		}
		legacy_government = {
			## cardinality = 0..inf
			<government_reform.legacy>
			## cardinality = 0..inf
			enum[hardcoded_legacygovernments]
		}
		## cardinality = 0..inf
		exclusive_reforms = {
			## cardinality = 1..inf
			<government_reform.new>
		}
	}

	subtype[pre_dharma_mapping] = {
		<government_reform> = {
			government = <government>
			legacy_government = <government_reform.legacy>
			## cardinality = 0..inf
			enum[hardcoded_legacygovernments]
		}
		tribal_democracy = {
			government = <government>
			legacy_government = <government_reform.legacy>
			## cardinality = 0..inf
			legacy_government = enum[hardcoded_legacygovernments]
		}
		native_council = {
			government = <government>
			legacy_government = <government_reform.legacy>
			## cardinality = 0..inf
			legacy_government = enum[hardcoded_legacygovernments]
		}
		all_mechanics = {
			government = <government>
			legacy_government = <government_reform.legacy>
			## cardinality = 0..inf
			legacy_government = enum[hardcoded_legacygovernments]
		}
	}
}

government_ranks = {
	## cardinality = 0..10
	## replace_scope = { root = country this = country }
	int[1..10] = {
		alias_name[modifier] = alias_match_left[modifier]
	}
}

government_name = {
	subtype[default] = {
		rank = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		ruler_male = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		ruler_female = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		consort_male  = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		consort_female = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		heir_male = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		heir_female = {
			## cardinality = 1..10
			int[1..10] = localisation
		}

		government_reform = <government_reform.basic>
	}

	subtype[!default] = {
		rank = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		ruler_male = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		ruler_female = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		consort_male  = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		consort_female = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		heir_male = {
			## cardinality = 0..10
			int[1..10] = localisation
		}

		## cardinality = 0..1
		heir_female = {
			## cardinality = 0..10
			int[1..10] = localisation
		}
	}

	## replace_scope = { root = country this = country }
	trigger = {
		alias_name[trigger] = alias_match_left[trigger]
	}
}

